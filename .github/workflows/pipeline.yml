name: Init New Repo with Generator

on:
  workflow_dispatch:
    inputs:
      org_name:
        description: "GitHub Organization"
        required: true
        default: "ondc-official"
      repo_name:
        description: "Name of the new GitHub repo"
        required: true
      brief_description:
        description: "Short description of the repository"
        required: true
      category:
        description: "Select category"
        type: choice
        options: [specifications, reference-apps, automation-testing, mock-sandbox, adaptors, sdks, infrastructure, documentation, logs]
      subcategory:
        description: "Select subcategory"
        type: choice
        options: [buyer-apps, seller-apps, logistics-apps, ecommerce, core-framework, services, mock-servers]
      domain:
        description: "Select domain"
        type: choice
        options: [retail, logistics, agriculture, healthcare, financial, mobility, education]
      type:
        description: "Select type"
        type: choice
        options: [frontend, backend, mobile, api, library, tool, documentation]
      status:
        description: "Select status"
        type: choice
        options: [production, beta, alpha, experimental, deprecated, archived]

jobs:
  create-repo:
    runs-on: ubuntu-latest
    steps:

      # Step 1: Checkout the generator repo
      - name: Checkout generator
        uses: actions/checkout@v4

      # Step 2: Install Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # Step 3: Initialize npm and install Yeoman + your generator
      - name: Install Yeoman and Generator
        run: |
          npm init -y                       # create package.json
          npm install -g yo                 # install Yeoman CLI
          npm pkg set name="generator-ondc-generator"
          npm install generator-ondc-generator
          npm install                       # install generator dependencies (if package.json exists)
          npm link                          # link your generator globally

      # Step 4: Create GitHub repo (with safe check)
      - name: Create Repo in Org
        run: |
          ORG="${{ github.event.inputs.org_name }}"
          REPO="${{ github.event.inputs.repo_name }}"
          DESC="${REPO}: [${{ github.event.inputs.category }}/${{ github.event.inputs.subcategory }}] ${{ github.event.inputs.brief_description }} | status: ${{ github.event.inputs.status }} | domain: ${{ github.event.inputs.domain }}"

          REPO_CHECK=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/$ORG/$REPO)

          if [ "$REPO_CHECK" -eq 200 ]; then
            echo "Repo $REPO already exists. Skipping creation."
          else
            CREATE_RESP=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
              -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/orgs/$ORG/repos \
              -d "{\"name\":\"$REPO\",\"private\":false,\"description\":\"$DESC\"}")
            if [ "$CREATE_RESP" -eq 201 ]; then
              echo "✅ Repo created: $ORG/$REPO"
            else
              echo "❌ Failed with status $CREATE_RESP"
              exit 1
            fi
          fi

      # Step 5: Add topics
      - name: Add Topics
        run: |
          ORG="${{ github.event.inputs.org_name }}"
          REPO="${{ github.event.inputs.repo_name }}"
          TOPICS="[\"category-${{ github.event.inputs.category }}\",\"subcategory-${{ github.event.inputs.subcategory }}\",\"type-${{ github.event.inputs.type }}\",\"status-${{ github.event.inputs.status }}\",\"domain-${{ github.event.inputs.domain }}\"]"
          curl -X PUT \
            -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/$ORG/$REPO/topics \
            -d "{\"names\": $TOPICS}"

      # Step 6: Scaffold new project using Yeoman
      - name: Scaffold Project
        run: |
          mkdir -p ${{ github.event.inputs.repo_name }}
          cd ${{ github.event.inputs.repo_name }}
          yo ondc-generator --skip-install

      # Step 7: Replace placeholders with actual repo name
      - name: Update Placeholders
        run: |
          cd ${{ github.event.inputs.repo_name }}
          REPO_NAME="${{ github.event.inputs.repo_name }}"
          sed -i "s/test55-node-backend/$REPO_NAME/g" package.json || true
          sed -i "s/test55-node-backend/$REPO_NAME/g" package-lock.json || true
          sed -i "s/test55-node-backend/$REPO_NAME/g" README.md || true
          sed -i "s/test55-node-backend/$REPO_NAME/g" docker-compose*.yml || true

      # Step 8: Push to the new repo
      - name: Push to GitHub
        run: |
          cd ${{ github.event.inputs.repo_name }}
          git init
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git branch -M main
          git remote add origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.event.inputs.org_name }}/${{ github.event.inputs.repo_name }}.git
          git add .
          git commit -m "Initial commit from generator [skip ci]"
          git push origin main
